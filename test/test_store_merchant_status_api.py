# coding: utf-8

"""
    Stores API

    API для мерчантов для управления своими торговыми точками   # Порядок работы с Stores API  1. Получить access token, выполнив (POST /auth/token) аутентификацию по oAuth 2.0 flow (client credentials) 2. Получить список своих торговых точек выполнив запрос /retail-chains/{retail_chain_slug}/stores     - Где retail_chain_slug это идентификатор сети мерчанта полученный в СберМаркете     - Этот запрос возвращает постраничный список ваших stores, зарегистрированных в СберМаркете     - В поле \"id\" находится идентификатор store в системе СберМеркет     - В поле \"merchant_store_id\" находится идентификатор store в системе мерчанта       - Для получения или изменения данных по торговой точке необходимо предоставлять этот идентификатор (merchant_store_id в пути к ресурсу) 3. Указать дополнительные данные по торговой точке, которые зависят от типа интеграции с СберМаркетом и вида торговой точки:     - при доставке мерчантом:       - PUT /retail-chains/{retail_chain_slug}/stores/{merchant_store_id}/merchant-status (изменение статуса магазина)         - чтобы узнать текущий статус store в приложении СберМаркет используйте GET /retail-chains/{retail_chain_slug}/stores/{merchant_store_id}           в поле sm_status.status указано доступен ли этот store в приложении СберМаркет для новых заказов     - для всех случаев:       - PUT /retail-chains/{retail_chain_slug}/stores/{merchant_store_id}/working-hours (рабочие часы торговой точки) 

    The version of the OpenAPI document: 1.0.7
    Contact: merchant.api@sbermarket.ru
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import logging
import unittest
from dotenv import dotenv_values

import sm_content_api as smc
from sm_content_api.api.store_merchant_status_api import StoreMerchantStatusApi

logger = logging.getLogger('sm_content_api')

config = smc.configuration.Configuration()

credentials = dotenv_values("../.env.test")

config.access_token = ''
config.retries = 3  # this enables aiohttp_retry client
config.client_id = credentials['STORES_CLIENT_ID']  # str |
config.client_secret = credentials['STORES_CLIENT_SECRET']  # str |
config.grant_type = credentials['GRANT_TYPE']  # str |
config.retail_chain_slug = credentials['STORES_RETAIL_CHAIN_SLUG']  # str |
config.http = credentials['STORES_API_HOST']
config.logger['sm_content_api'] = logger


TEST_STORE_ID = credentials['TEST_STORE_ID']

ACTIVE, INACTIVE, PAUSED = 'ACTIVE', 'INACTIVE', 'PAUSED'


class TestStoreMerchantStatusApi(unittest.IsolatedAsyncioTestCase):
    """StoreMerchantStatusApi unit test stubs"""

    def setUp(self) -> None:
        self.client = smc.ApiClient(config)
        self.api = StoreMerchantStatusApi(self.client)

    async def asyncTearDown(self) -> None:
        await self.client.close()

    async def test_get_store_merchant_status(self) -> None:
        """Test case for get_store_merchant_status

        Статус торговой точки, установленный мерчантом
        """
        # req = smc.models.ImportCategoriesRequest(data=[test_cat_parent, test_cat_child, test_cat_parent_2])
        # print(req)

        api_response = None

        try:
            # Import categories
            api_response = await self.api.get_store_merchant_status(
                retail_chain_slug=self.client.configuration.retail_chain_slug,
                merchant_store_id=TEST_STORE_ID)
        except smc.ApiException as e:
            print("Exception when calling StoreMerchantStatusApi->get_store_merchant_status: %s\n" % e)

        self.assertIsInstance(api_response, smc.models.GetStoreMerchantStatus200Response)
        print(api_response.to_str())

    async def test_put_store_retailer_status_inactive(self) -> None:
        """Test case for put_store_retailer_status

        Изменение статуса store мерчантом
        """
        req = smc.models.GetStoreMerchantStatus200Response(data=smc.MerchantStoreStatus(status=INACTIVE, comment="Test INACTIVE status"))
        print(req)

        api_response = False

        try:
            # Import categories
            api_response = await self.api.put_store_retailer_status(
                retail_chain_slug=self.client.configuration.retail_chain_slug,
                merchant_store_id=TEST_STORE_ID,
                get_store_merchant_status200_response=req)
        except smc.ApiException as e:
            print("Exception when calling StoreMerchantStatusApi->put_store_retailer_status: %s\n" % e)
        print(api_response.to_str())
        self.assertIsInstance(api_response, smc.models.GetStoreMerchantStatus200Response)
        self.assertEqual(api_response.data.status, INACTIVE)

    async def test_put_store_retailer_status_active(self) -> None:
        """Test case for put_store_retailer_status

        Изменение статуса store мерчантом
        """
        req = smc.models.GetStoreMerchantStatus200Response(data=smc.MerchantStoreStatus(status=ACTIVE, comment="Test ACTIVE status"))
        print(req)

        api_response = False

        try:
            # Import categories
            api_response = await self.api.put_store_retailer_status(
                retail_chain_slug=self.client.configuration.retail_chain_slug,
                merchant_store_id=TEST_STORE_ID,
                get_store_merchant_status200_response=req)
        except smc.ApiException as e:
            print("Exception when calling StoreMerchantStatusApi->put_store_retailer_status: %s\n" % e)
        print(api_response.to_str())
        self.assertIsInstance(api_response, smc.models.GetStoreMerchantStatus200Response)
        self.assertEqual(api_response.data.status, ACTIVE)

    async def test_put_store_retailer_status_paused(self) -> None:
        """Test case for put_store_retailer_status

        Изменение статуса store мерчантом
        """
        req = smc.models.GetStoreMerchantStatus200Response(data=smc.MerchantStoreStatus(status=PAUSED, comment="Test PAUSED status"))
        print(req)

        api_response = False

        try:
            # Import categories
            api_response = await self.api.put_store_retailer_status(
                retail_chain_slug=self.client.configuration.retail_chain_slug,
                merchant_store_id=TEST_STORE_ID,
                get_store_merchant_status200_response=req)
        except smc.ApiException as e:
            print("Exception when calling StoreMerchantStatusApi->put_store_retailer_status: %s\n" % e)
        print(api_response.to_str())
        self.assertIsInstance(api_response, smc.models.GetStoreMerchantStatus200Response)
        self.assertEqual(api_response.data.status, PAUSED)


if __name__ == '__main__':
    unittest.main()
