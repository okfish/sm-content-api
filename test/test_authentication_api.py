# coding: utf-8

"""
    Authentication API для мерчантов для получения access tokens. 
    Порядок работы 
        1. Получить access token, выполнив POST /auth/token по oAuth 2.0 flow (client credentials)
    
    Базовый URL для запросов: `https://merchant-api.sbermarket.ru`
    
    The version of the OpenAPI document: 0.0.2a
    Generated by OpenAPI Generator (https://openapi-generator.tech)
"""  # noqa: E501

import json
import unittest

import sm_content_api as smc

from dotenv import dotenv_values

from sm_content_api import ApiException

config = smc.configuration.Configuration()

client_id = 'client_id_example'  # str |
client_secret = 'client_secret_example'  # str |
grant_type = 'grant_type_WRONG'  # str |

credentials = dotenv_values("../.env.test")


class TestAuthenticationApi(unittest.IsolatedAsyncioTestCase):
    """AuthenticationApi unit tests"""

    def setUp(self) -> None:
        self.client = smc.ApiClient(config)
        self.api = smc.AuthenticationApi(self.client)

    async def asyncTearDown(self) -> None:
        await self.client.close()

    async def test_get_token_unsupported_grant_type(self) -> None:
        """Test case for get_token with unsupported grant type

        Получение JWT токена
        """
        try:
            # Получение JWT токена
            api_response = await self.api.get_token(client_id, client_secret, grant_type)
        except smc.exceptions.BadRequestException as e:
            body = json.loads(e.body)
            self.assertIn('error', body)
            self.assertEqual(body['error'], 'unsupported_grant_type')
        except ApiException as e:
            print("Exception when calling AuthenticationApi->get_token: %s\n" % e)

    async def test_get_token_wrong_creds(self) -> None:
        """Test case for get_token with wrong credits

        Получение JWT токена
        """
        grant_type = 'client_credentials'

        try:
            # Получение JWT токена
            api_response = await self.api.get_token(client_id, client_secret, grant_type)
        except smc.exceptions.BadRequestException as e:
            body = json.loads(e.body)
            self.assertIn('error', body)
            self.assertEqual(body['error'], 'invalid_client')
        except ApiException as e:
            print("Exception when calling AuthenticationApi->get_token: %s\n" % e)

    async def test_get_token_wrong_secret_dotenv(self) -> None:
        """Test case for get_token with credits loaded by dotenv, but wrong secret

        Получение JWT токена
        """
        client_id = credentials['CLIENT_ID']  # str |
        grant_type = credentials['GRANT_TYPE']  # str |
        api_response = None

        try:
            # Получение JWT токена
            api_response = await self.api.get_token(client_id, client_secret, grant_type)
        except smc.exceptions.UnauthorizedException as e:
            body = json.loads(e.body)
            self.assertIn('error', body)
            self.assertEqual(body['error'], 'unauthorized_client')
        except ApiException as e:
            print("Exception when calling AuthenticationApi->get_token: %s\n" % e)

    async def test_get_token_creds_dotenv(self) -> None:
        """Test case for get_token with credits loaded by dotenv

        Получение JWT токена
        """
        client_id = credentials['CLIENT_ID']  # str |
        client_secret = credentials['CLIENT_SECRET']  # str |
        grant_type = credentials['GRANT_TYPE']  # str |
        api_response = None

        try:
            # Получение JWT токена
            api_response = await self.api.get_token(client_id, client_secret, grant_type)
        except ApiException as e:
            print("Exception when calling AuthenticationApi->get_token: %s\n" % e)

        # print(api_response.to_str())
        self.assertGreater(api_response.expires_in, 0)
        self.assertEqual(api_response.token_type, 'Bearer')


if __name__ == '__main__':
    unittest.main()
