# coding: utf-8

"""
    Stores API

    API для мерчантов для управления своими торговыми точками   # Порядок работы с Stores API  1. Получить access token, выполнив (POST /auth/token) аутентификацию по oAuth 2.0 flow (client credentials) 2. Получить список своих торговых точек выполнив запрос /retail-chains/{retail_chain_slug}/stores     - Где retail_chain_slug это идентификатор сети мерчанта полученный в СберМаркете     - Этот запрос возвращает постраничный список ваших stores, зарегистрированных в СберМаркете     - В поле \"id\" находится идентификатор store в системе СберМеркет     - В поле \"merchant_store_id\" находится идентификатор store в системе мерчанта       - Для получения или изменения данных по торговой точке необходимо предоставлять этот идентификатор (merchant_store_id в пути к ресурсу) 3. Указать дополнительные данные по торговой точке, которые зависят от типа интеграции с СберМаркетом и вида торговой точки:     - при доставке мерчантом:       - PUT /retail-chains/{retail_chain_slug}/stores/{merchant_store_id}/merchant-status (изменение статуса магазина)         - чтобы узнать текущий статус store в приложении СберМаркет используйте GET /retail-chains/{retail_chain_slug}/stores/{merchant_store_id}           в поле sm_status.status указано доступен ли этот store в приложении СберМаркет для новых заказов     - для всех случаев:       - PUT /retail-chains/{retail_chain_slug}/stores/{merchant_store_id}/working-hours (рабочие часы торговой точки) 

    The version of the OpenAPI document: 1.0.7
    Contact: merchant.api@sbermarket.ru
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from sm_content_api.models.external_delivery_eta_with_zone import ExternalDeliveryEtaWithZone

class TestExternalDeliveryEtaWithZone(unittest.TestCase):
    """ExternalDeliveryEtaWithZone unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ExternalDeliveryEtaWithZone:
        """Test ExternalDeliveryEtaWithZone
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ExternalDeliveryEtaWithZone`
        """
        model = ExternalDeliveryEtaWithZone()
        if include_optional:
            return ExternalDeliveryEtaWithZone(
                eta = 0,
                outer_zones = [
                    ''
                    ],
                sigma = 0
            )
        else:
            return ExternalDeliveryEtaWithZone(
                eta = 0,
                outer_zones = [
                    ''
                    ],
                sigma = 0,
        )
        """

    def testExternalDeliveryEtaWithZone(self):
        """Test ExternalDeliveryEtaWithZone"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
