# coding: utf-8

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr, field_validator
from typing import Optional
from typing_extensions import Annotated
from sm_content_api.models.get_store_external_zone200_response import GetStoreExternalZone200Response
from sm_content_api.models.post_external_zones_create_request import PostExternalZonesCreateRequest
from sm_content_api.models.put_external_zones_update_request import PutExternalZonesUpdateRequest

from sm_content_api.api_client import ApiClient, RequestSerialized
from sm_content_api.api_response import ApiResponse
from sm_content_api.rest import RESTResponseType
from sm_content_api.auth import refresh_expired_token

class ExternalZonesApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    @refresh_expired_token()
    async def get_store_external_zone(
        self,
        retail_chain_slug: Annotated[str, Field(strict=True, description="Человекочитаемый идентификатор торговой сети мерчанта")],
        merchant_store_id: Annotated[StrictStr, Field(description="идентификатор торговой точки мерчанта")],
        external_zone_id: Annotated[StrictStr, Field(description="ID зоны внутри системы Ритейлера")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetStoreExternalZone200Response:
        """Информация по зоне доставки для торговой точки

        Запрос на получение зоны доставки для торговой точки

        :param retail_chain_slug: Человекочитаемый идентификатор торговой сети мерчанта (required)
        :type retail_chain_slug: str
        :param merchant_store_id: идентификатор торговой точки мерчанта (required)
        :type merchant_store_id: str
        :param external_zone_id: ID зоны внутри системы Ритейлера (required)
        :type external_zone_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_store_external_zone_serialize(
            retail_chain_slug=retail_chain_slug,
            merchant_store_id=merchant_store_id,
            external_zone_id=external_zone_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetStoreExternalZone200Response",
            '400': "CommonDataObjectsProblemDetailsV1",
            '422': "CommonDataObjectsProblemDetailsV1",
            '429': "CommonDataObjectsProblemDetailsV1",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    async def get_store_external_zone_with_http_info(
        self,
        retail_chain_slug: Annotated[str, Field(strict=True, description="Человекочитаемый идентификатор торговой сети мерчанта")],
        merchant_store_id: Annotated[StrictStr, Field(description="идентификатор торговой точки мерчанта")],
        external_zone_id: Annotated[StrictStr, Field(description="ID зоны внутри системы Ритейлера")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetStoreExternalZone200Response]:
        """Информация по зоне доставки для торговой точки

        Запрос на получение зоны доставки для торговой точки

        :param retail_chain_slug: Человекочитаемый идентификатор торговой сети мерчанта (required)
        :type retail_chain_slug: str
        :param merchant_store_id: идентификатор торговой точки мерчанта (required)
        :type merchant_store_id: str
        :param external_zone_id: ID зоны внутри системы Ритейлера (required)
        :type external_zone_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_store_external_zone_serialize(
            retail_chain_slug=retail_chain_slug,
            merchant_store_id=merchant_store_id,
            external_zone_id=external_zone_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetStoreExternalZone200Response",
            '400': "CommonDataObjectsProblemDetailsV1",
            '422': "CommonDataObjectsProblemDetailsV1",
            '429': "CommonDataObjectsProblemDetailsV1",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    async def get_store_external_zone_without_preload_content(
        self,
        retail_chain_slug: Annotated[str, Field(strict=True, description="Человекочитаемый идентификатор торговой сети мерчанта")],
        merchant_store_id: Annotated[StrictStr, Field(description="идентификатор торговой точки мерчанта")],
        external_zone_id: Annotated[StrictStr, Field(description="ID зоны внутри системы Ритейлера")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Информация по зоне доставки для торговой точки

        Запрос на получение зоны доставки для торговой точки

        :param retail_chain_slug: Человекочитаемый идентификатор торговой сети мерчанта (required)
        :type retail_chain_slug: str
        :param merchant_store_id: идентификатор торговой точки мерчанта (required)
        :type merchant_store_id: str
        :param external_zone_id: ID зоны внутри системы Ритейлера (required)
        :type external_zone_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_store_external_zone_serialize(
            retail_chain_slug=retail_chain_slug,
            merchant_store_id=merchant_store_id,
            external_zone_id=external_zone_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetStoreExternalZone200Response",
            '400': "CommonDataObjectsProblemDetailsV1",
            '422': "CommonDataObjectsProblemDetailsV1",
            '429': "CommonDataObjectsProblemDetailsV1",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_store_external_zone_serialize(
        self,
        retail_chain_slug,
        merchant_store_id,
        external_zone_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if retail_chain_slug is not None:
            _path_params['retail_chain_slug'] = retail_chain_slug
        if merchant_store_id is not None:
            _path_params['merchant_store_id'] = merchant_store_id
        if external_zone_id is not None:
            _path_params['external_zone_id'] = external_zone_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'oAuth2ClientCredentials'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/retail-chains/{retail_chain_slug}/stores/{merchant_store_id}/external-zones/{external_zone_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    @refresh_expired_token()
    async def post_external_zones_create(
        self,
        retail_chain_slug: Annotated[str, Field(strict=True, description="Человекочитаемый идентификатор торговой сети мерчанта")],
        merchant_store_id: Annotated[StrictStr, Field(description="идентификатор торговой точки мерчанта")],
        post_external_zones_create_request: Annotated[Optional[PostExternalZonesCreateRequest], Field(description="Запрос на cоздание новой зоны доставки")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Создание новой зоны доставки

        Запрос на cоздание новой зоны доставки

        :param retail_chain_slug: Человекочитаемый идентификатор торговой сети мерчанта (required)
        :type retail_chain_slug: str
        :param merchant_store_id: идентификатор торговой точки мерчанта (required)
        :type merchant_store_id: str
        :param post_external_zones_create_request: Запрос на cоздание новой зоны доставки
        :type post_external_zones_create_request: PostExternalZonesCreateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_external_zones_create_serialize(
            retail_chain_slug=retail_chain_slug,
            merchant_store_id=merchant_store_id,
            post_external_zones_create_request=post_external_zones_create_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '400': "CommonDataObjectsProblemDetailsV1",
            '422': "CommonDataObjectsProblemDetailsV1",
            '429': "CommonDataObjectsProblemDetailsV1",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    async def post_external_zones_create_with_http_info(
        self,
        retail_chain_slug: Annotated[str, Field(strict=True, description="Человекочитаемый идентификатор торговой сети мерчанта")],
        merchant_store_id: Annotated[StrictStr, Field(description="идентификатор торговой точки мерчанта")],
        post_external_zones_create_request: Annotated[Optional[PostExternalZonesCreateRequest], Field(description="Запрос на cоздание новой зоны доставки")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Создание новой зоны доставки

        Запрос на cоздание новой зоны доставки

        :param retail_chain_slug: Человекочитаемый идентификатор торговой сети мерчанта (required)
        :type retail_chain_slug: str
        :param merchant_store_id: идентификатор торговой точки мерчанта (required)
        :type merchant_store_id: str
        :param post_external_zones_create_request: Запрос на cоздание новой зоны доставки
        :type post_external_zones_create_request: PostExternalZonesCreateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_external_zones_create_serialize(
            retail_chain_slug=retail_chain_slug,
            merchant_store_id=merchant_store_id,
            post_external_zones_create_request=post_external_zones_create_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '400': "CommonDataObjectsProblemDetailsV1",
            '422': "CommonDataObjectsProblemDetailsV1",
            '429': "CommonDataObjectsProblemDetailsV1",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    async def post_external_zones_create_without_preload_content(
        self,
        retail_chain_slug: Annotated[str, Field(strict=True, description="Человекочитаемый идентификатор торговой сети мерчанта")],
        merchant_store_id: Annotated[StrictStr, Field(description="идентификатор торговой точки мерчанта")],
        post_external_zones_create_request: Annotated[Optional[PostExternalZonesCreateRequest], Field(description="Запрос на cоздание новой зоны доставки")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Создание новой зоны доставки

        Запрос на cоздание новой зоны доставки

        :param retail_chain_slug: Человекочитаемый идентификатор торговой сети мерчанта (required)
        :type retail_chain_slug: str
        :param merchant_store_id: идентификатор торговой точки мерчанта (required)
        :type merchant_store_id: str
        :param post_external_zones_create_request: Запрос на cоздание новой зоны доставки
        :type post_external_zones_create_request: PostExternalZonesCreateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_external_zones_create_serialize(
            retail_chain_slug=retail_chain_slug,
            merchant_store_id=merchant_store_id,
            post_external_zones_create_request=post_external_zones_create_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '400': "CommonDataObjectsProblemDetailsV1",
            '422': "CommonDataObjectsProblemDetailsV1",
            '429': "CommonDataObjectsProblemDetailsV1",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_external_zones_create_serialize(
        self,
        retail_chain_slug,
        merchant_store_id,
        post_external_zones_create_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if retail_chain_slug is not None:
            _path_params['retail_chain_slug'] = retail_chain_slug
        if merchant_store_id is not None:
            _path_params['merchant_store_id'] = merchant_store_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if post_external_zones_create_request is not None:
            _body_params = post_external_zones_create_request


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'oAuth2ClientCredentials'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/v1/retail-chains/{retail_chain_slug}/stores/{merchant_store_id}/external-zones',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    @refresh_expired_token()
    async def put_external_zones_update(
        self,
        retail_chain_slug: Annotated[str, Field(strict=True, description="Человекочитаемый идентификатор торговой сети мерчанта")],
        merchant_store_id: Annotated[StrictStr, Field(description="идентификатор торговой точки мерчанта")],
        external_zone_id: Annotated[StrictStr, Field(description="ID зоны внутри системы Ритейлера")],
        put_external_zones_update_request: Annotated[Optional[PutExternalZonesUpdateRequest], Field(description="Запрос на обновление зоны доставки")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Обновление зоны доставки

        Запрос на обновление зоны доставки. Метод поддерживает передачу только одного из параметров (coordinates или status) в одном сообщении.

        :param retail_chain_slug: Человекочитаемый идентификатор торговой сети мерчанта (required)
        :type retail_chain_slug: str
        :param merchant_store_id: идентификатор торговой точки мерчанта (required)
        :type merchant_store_id: str
        :param external_zone_id: ID зоны внутри системы Ритейлера (required)
        :type external_zone_id: str
        :param put_external_zones_update_request: Запрос на обновление зоны доставки
        :type put_external_zones_update_request: PutExternalZonesUpdateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_external_zones_update_serialize(
            retail_chain_slug=retail_chain_slug,
            merchant_store_id=merchant_store_id,
            external_zone_id=external_zone_id,
            put_external_zones_update_request=put_external_zones_update_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '400': "CommonDataObjectsProblemDetailsV1",
            '422': "CommonDataObjectsProblemDetailsV1",
            '429': "CommonDataObjectsProblemDetailsV1",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    async def put_external_zones_update_with_http_info(
        self,
        retail_chain_slug: Annotated[str, Field(strict=True, description="Человекочитаемый идентификатор торговой сети мерчанта")],
        merchant_store_id: Annotated[StrictStr, Field(description="идентификатор торговой точки мерчанта")],
        external_zone_id: Annotated[StrictStr, Field(description="ID зоны внутри системы Ритейлера")],
        put_external_zones_update_request: Annotated[Optional[PutExternalZonesUpdateRequest], Field(description="Запрос на обновление зоны доставки")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Обновление зоны доставки

        Запрос на обновление зоны доставки. Метод поддерживает передачу только одного из параметров (coordinates или status) в одном сообщении.

        :param retail_chain_slug: Человекочитаемый идентификатор торговой сети мерчанта (required)
        :type retail_chain_slug: str
        :param merchant_store_id: идентификатор торговой точки мерчанта (required)
        :type merchant_store_id: str
        :param external_zone_id: ID зоны внутри системы Ритейлера (required)
        :type external_zone_id: str
        :param put_external_zones_update_request: Запрос на обновление зоны доставки
        :type put_external_zones_update_request: PutExternalZonesUpdateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_external_zones_update_serialize(
            retail_chain_slug=retail_chain_slug,
            merchant_store_id=merchant_store_id,
            external_zone_id=external_zone_id,
            put_external_zones_update_request=put_external_zones_update_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '400': "CommonDataObjectsProblemDetailsV1",
            '422': "CommonDataObjectsProblemDetailsV1",
            '429': "CommonDataObjectsProblemDetailsV1",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    async def put_external_zones_update_without_preload_content(
        self,
        retail_chain_slug: Annotated[str, Field(strict=True, description="Человекочитаемый идентификатор торговой сети мерчанта")],
        merchant_store_id: Annotated[StrictStr, Field(description="идентификатор торговой точки мерчанта")],
        external_zone_id: Annotated[StrictStr, Field(description="ID зоны внутри системы Ритейлера")],
        put_external_zones_update_request: Annotated[Optional[PutExternalZonesUpdateRequest], Field(description="Запрос на обновление зоны доставки")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Обновление зоны доставки

        Запрос на обновление зоны доставки. Метод поддерживает передачу только одного из параметров (coordinates или status) в одном сообщении.

        :param retail_chain_slug: Человекочитаемый идентификатор торговой сети мерчанта (required)
        :type retail_chain_slug: str
        :param merchant_store_id: идентификатор торговой точки мерчанта (required)
        :type merchant_store_id: str
        :param external_zone_id: ID зоны внутри системы Ритейлера (required)
        :type external_zone_id: str
        :param put_external_zones_update_request: Запрос на обновление зоны доставки
        :type put_external_zones_update_request: PutExternalZonesUpdateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_external_zones_update_serialize(
            retail_chain_slug=retail_chain_slug,
            merchant_store_id=merchant_store_id,
            external_zone_id=external_zone_id,
            put_external_zones_update_request=put_external_zones_update_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '400': "CommonDataObjectsProblemDetailsV1",
            '422': "CommonDataObjectsProblemDetailsV1",
            '429': "CommonDataObjectsProblemDetailsV1",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _put_external_zones_update_serialize(
        self,
        retail_chain_slug,
        merchant_store_id,
        external_zone_id,
        put_external_zones_update_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if retail_chain_slug is not None:
            _path_params['retail_chain_slug'] = retail_chain_slug
        if merchant_store_id is not None:
            _path_params['merchant_store_id'] = merchant_store_id
        if external_zone_id is not None:
            _path_params['external_zone_id'] = external_zone_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if put_external_zones_update_request is not None:
            _body_params = put_external_zones_update_request


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'oAuth2ClientCredentials'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/api/v1/retail-chains/{retail_chain_slug}/stores/{merchant_store_id}/external-zones/{external_zone_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


